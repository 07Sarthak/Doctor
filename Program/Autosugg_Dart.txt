import 'dart:collection';

// Alphabet size (# of symbols)
const int ALPHABET_SIZE = 26;

// Converts key current character into index
// use only 'a' through 'z' and lower case
int charToIndex(String c) => c.codeUnitAt(0) - 'a'.codeUnitAt(0);

// Trie node
class TrieNode {
  List<TrieNode?> children = List<TrieNode?>.filled(ALPHABET_SIZE, null);

  // isWordEnd is true if the node represents
  // end of a word
  bool isWordEnd = false;
}

// Returns new trie node (initialized to NULLs)
TrieNode getNode() {
  TrieNode pNode = TrieNode();
  return pNode;
}

// If not present, inserts key into trie. If the
// key is prefix of trie node, just marks leaf node
void insert(TrieNode root, String key) {
  TrieNode pCrawl = root;

  for (int level = 0; level < key.length; level++) {
    int index = charToIndex(key[level]);
    if (pCrawl.children[index] == null)
      pCrawl.children[index] = getNode();

    pCrawl = pCrawl.children[index]!;
  }

  // mark last node as leaf
  pCrawl.isWordEnd = true;
}

// Returns false if current node has a child
// If all children are NULL, return true.
bool isLastNode(TrieNode root) {
  for (int i = 0; i < ALPHABET_SIZE; i++)
    if (root.children[i] != null) return false;
  return true;
}

// Recursive function to print auto-suggestions for given
// node.
void suggestionsRec(TrieNode root, String currPrefix) {
  // found a string in Trie with the given prefix
  if (root.isWordEnd) print(currPrefix);

  for (int i = 0; i < ALPHABET_SIZE; i++)
    if (root.children[i] != null) {
      // child node character value
      String child = String.fromCharCode('a'.codeUnitAt(0) + i);
      suggestionsRec(root.children[i]!, currPrefix + child);
    }
}

// Print suggestions for given query prefix.
int printAutoSuggestions(TrieNode root, String query) {
  TrieNode pCrawl = root;
  String prefix = '';

  for (int i = 0; i < query.length; i++) {
    int ind = charToIndex(query[i]);

    // No string in the Trie has this prefix
    if (pCrawl.children[ind] == null) {
      prefix += query[i];
      insert(pCrawl, prefix); // Add the missing prefix to the trie
      print(prefix); // Print the newly added prefix
      return -1; // No need to further search, return -1
    }

    pCrawl = pCrawl.children[ind]!;
    prefix += query[i];
  }

  // If prefix is present as a word, but
  // there is no subtree below the last
  // matching node.
  if (isLastNode(pCrawl)) {
    print(query);
    return -1;
  }

  suggestionsRec(pCrawl, query);
  return 1;
}

// Driver Code
void main() {
  TrieNode root = getNode();
  insert(root, "hello");
  insert(root, "dog");
  insert(root, "hell");
  insert(root, "cat");
  insert(root, "a");
  insert(root, "hel");
  insert(root, "help");
  insert(root, "helps");
  insert(root, "helping");
  int comp = printAutoSuggestions(root, "hel");

  if (comp == -1)
    print("No other strings found with this prefix");

  else if (comp == 0)
    print("No string found with this prefix");
}
